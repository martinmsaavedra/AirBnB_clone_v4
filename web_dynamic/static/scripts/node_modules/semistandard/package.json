{
  "name": "semistandard",
  "description": "All the goodness of `feross/standard` with semicolons sprinkled on top.",
  "version": "16.0.0",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "https://feross.org"
  },
  "bin": {
    "semistandard": "./bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/standard/semistandard/issues"
  },
  "dependencies": {
    "eslint": "~7.12.1",
    "eslint-config-semistandard": "15.0.1",
    "eslint-config-standard": "16.0.0",
    "eslint-config-standard-jsx": "10.0.0",
    "eslint-plugin-import": "~2.22.1",
    "eslint-plugin-node": "~11.1.0",
    "eslint-plugin-promise": "~4.2.1",
    "eslint-plugin-react": "~7.21.5",
    "eslint-plugin-standard": "~4.0.2",
    "standard-engine": "^14.0.0"
  },
  "devDependencies": {
    "merge": "^1.2.1",
    "mkdirp": "^1.0.4",
    "rimraf": "^3.0.2",
    "run-series": "^1.1.9",
    "standard": "*",
    "tape": "^5.0.1",
    "xtend": "^4.0.2"
  },
  "engines": {
    "node": ">=6"
  },
  "homepage": "https://github.com/standard/semistandard",
  "keywords": [
    "JavaScript Standard Style",
    "bikeshed",
    "check",
    "checker",
    "code",
    "code checker",
    "code linter",
    "code standards",
    "code style",
    "enforce",
    "eslint",
    "hint",
    "jscs",
    "jshint",
    "lint",
    "policy",
    "quality",
    "semicolon",
    "simple",
    "standard",
    "standard style",
    "style",
    "style checker",
    "style linter",
    "verify"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/standard/semistandard.git"
  },
  "scripts": {
    "test": "standard && tape test/*.js"
  },
  "standard": {
    "ignore": "tmp/**"
  },
  "funding": [
    {
      "type": "github",
      "url": "https://github.com/sponsors/feross"
    },
    {
      "type": "patreon",
      "url": "https://www.patreon.com/feross"
    },
    {
      "type": "consulting",
      "url": "https://feross.org/support"
    }
  ],
  "readme": "# JavaScript Semi-Standard Style\n[![travis][travis-image]][travis-url]\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n\n### One Semicolon for the Dark Lord on his dark throne\n\nAll the goodness of [standard/standard] with semicolons sprinkled on top.\n\n## Install\n\n```bash\nnpm install semistandard\n```\n\n## Rules\n\nImportantly:\n\n- **semicolons**\n- Check [standard/standard] for the rest of the rules.\n\n## Badge\n\nUse this in one of your projects? Include one of these badges in your readme to\nlet people know that your code is using the standard style.\n\n[![js-semistandard-style](https://raw.githubusercontent.com/standard/semistandard/master/badge.svg)](https://github.com/standard/semistandard)\n\n```markdown\n[![js-semistandard-style](https://raw.githubusercontent.com/standard/semistandard/master/badge.svg)](https://github.com/standard/semistandard)\n```\n\n[![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/standard/semistandard)\n\n```markdown\n[![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/standard/semistandard)\n```\n\n## Usage\n\nThe easiest way to use JavaScript Semi-Standard Style to check your code is to install it\nglobally as a Node command line program. To do so, simply run the following command in\nyour terminal (flag `-g` installs `semistandard` globally on your system, omit it if you want\nto install in the current working directory):\n\n```bash\nnpm install semistandard -g\n```\n\nAfter you've done that you should be able to use the `semistandard` program. The simplest use\ncase would be checking the style of all JavaScript files in the current working directory:\n\n```\n$ semistandard\nError: Use JavaScript Semi-Standard Style\n  lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n```\n\n### Editor plugins\n\n- **Sublime users**: Try [SublimeLinter-contrib-semistandard](https://github.com/Flet/SublimeLinter-contrib-semistandard) for linting in your editor!\n- **Atom users** - Install [linter-js-standard](https://atom.io/packages/linter-js-standard)\n- **VSCode users** - Install [vscode-standardjs](https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs)\n\n### What you might do if you're clever\n\n1. Add it to `package.json`\n\n  ```json\n  {\n    \"name\": \"my-cool-package\",\n    \"devDependencies\": {\n      \"semistandard\": \"*\"\n    },\n    \"scripts\": {\n      \"test\": \"semistandard && node my-normal-tests-littered-with-semicolons.js\"\n    }\n  }\n  ```\n\n2. Check style automatically when you run `npm test`\n\n  ```\n  $ npm test\n  Error: Code style check failed:\n    lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n  ```\n\n3. Never give style feedback on a pull request again! (unless it's about semicolons)\n\n### Custom Parser\nTo use a custom parser, install it from npm (example: `npm install\nbabel-eslint`) and add this to your package.json:\n\n```json\n{\n  \"semistandard\": {\n    \"parser\": \"babel-eslint\"\n  }\n}\n```\n\n### [Vim](http://www.vim.org/)\n\nInstall **[Syntastic][vim-1]** and add these lines to `.vimrc`:\n\n```vim\nlet g:syntastic_javascript_checkers=['standard']\nlet g:syntastic_javascript_standard_exec = 'semistandard'\n```\n\nFor automatic formatting on save, add these two lines to `.vimrc`:\n\n```vim\nautocmd bufwritepost *.js silent !semistandard % --fix\nset autoread\n```\n\n[vim-1]: https://github.com/scrooloose/syntastic\n\n### Ignoring files\n\nJust like in `standard`, The paths `node_modules/**`, `*.min.js`, `bundle.js`, `coverage/**`, hidden files/folders\n(beginning with `.`), and all patterns in a project's root `.gitignore` file are\nautomatically excluded when looking for `.js` files to check.\n\nSometimes you need to ignore additional folders or specific minfied files. To do that, add\na `semistandard.ignore` property to `package.json`:\n\n```json\n\"semistandard\": {\n  \"ignore\": [\n    \"**/out/\",\n    \"/lib/select2/\",\n    \"/lib/ckeditor/\",\n    \"tmp.js\"\n  ]\n}\n```\n\n### Make it look `snazzy`\nIf you want prettier output, just install the [`snazzy`](https://github.com/feross/snazzy) package and pipe `semistandard` to it:\n\n```bash\n$ semistandard --verbose | snazzy\n```\n\nSee [standard/standard] for more information.\n\n[travis-image]: https://img.shields.io/travis/standard/semistandard.svg?style=flat-square\n[travis-url]: https://travis-ci.org/standard/semistandard\n[npm-image]: https://img.shields.io/npm/v/semistandard.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/semistandard\n[downloads-image]: https://img.shields.io/npm/dm/semistandard.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/semistandard\n[standard/standard]: https://github.com/standard/standard\n",
  "readmeFilename": "README.md",
  "_id": "semistandard@16.0.0",
  "_from": "semistandard@"
}
